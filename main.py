import requests
import html5lib
import lxml
from bs4 import BeautifulSoup
import re
import pymorphy2
from collections import Counter
import math
import operator

import sys
# Импортируем наш интерфейс из файла
from med import *
from PyQt5 import QtCore, QtGui, QtWidgets

quotes = [
    "",
    " появились и стали нарастать боли в верхних отделах живота, тошнота. Самостоятельно принимала активированный уголь. Боли постепенно усиливались, ",
    "Считает себя больной с 13.05.16г., когда отметила появление болей в верхних отделах живота. Присоединилась тошнота. Принимала Но-шпу без эффекта.  в связи с ухудшением состояния вызвала СМП",
    "Со слов больной за 3 часа до поступления отметила поступления отметила появление болей в животе. Самостоятельно не лечилась. В связи с нарастанием болей вызвала БСМП, доставлена в 13 ГКБ.",
    "Считает себя больным с 27.01.16  когда после приема пищи появились боли в правом подреберье. Самостоятельно принимал но-шпа, в связи с усилением болей вызвал бригаду СМП,",
    " в течение 2-х суток беспокоят боли в верхних отделах живота, тошнота. Лечилась самостоятельно без эффекта. В связи с нарастанием болей …",
    "Заболел ночью 10.09.14г., когда после погрешности в диете появились боли в эпигастрии, правом подреберье, тошнота, рвота. Самостоятельно принимал НПВС с незначительным положительным эффектом - боли стихли. 13.09.14г. боли усилились, в связи с чем вызвал бригаду СП и был доставлен в ГКБ № 13. ",
    "Со слов больного настоящее ухудшение в течении суток, когда после приема пищи отметил появление вышеуказанных жалоб. Самостоятельно не лечился. БСМП доставлен в ГКБ№13",
    "Заболела остро 09.03.2015г  в первой половине дня, когда появились боли в правом подреберье, самостоятельно принимала диклофенак с некоторым положительным эффектом. Сегодня боли усилились, вызвала скорую, доставлена в ГКБ№13",
    "Поступала в экстренном порядке через сутки от появления болей в эпигастрии, правых отделах живота"
]

quotes2 = [
    "Язык влажный. Живот не вздут, симметричный, участвует в акте дыхания. При пальпации  мягкий, болезненный в правом подреберье. Симптомы раздражения брюшины отрицательные. ...",
    "Язык сухой, чистый. Живот не вздут, симметричный, участвует в акте дыхания. При пальпации  мягкий, болезненный в эпигастрии, правом подреберье. Симптомы раздражения брюшины отрицательные. ...",
    "Язык  влажный, обложен белым налетом.",
    "язык влажный, чистый. Живот не вздут, при пальпации болезненный в правом подреберье. Желчный пузырь не пальпируется. Симптомы Воскресенского, Щеткина-Блюмберга отрицательные. С-м",
    "Язык влажный, чистый. Живот не вздут, симметричный, участвует в акте дыхания. При пальпации  мягкий, болезненный в правом подреберье. Симптомы раздражения брюшины отрицательные. ..",
    "Симптом Ортнера положительный. Дополнительные образования в брюшной полости не пальпируются. Печень не увеличена, по краю реберной дуги. ",
    "Язык влажный, чистый. Живот не вздут, симметричный, участвует в акте дыхания. При пальпации  мягкий, болезненный в области правого подреберья. Симптомы раздражения брюшины отрицательные. Дополнительные образования в брюшной полости не пальпируются. Печень не увеличена, по краю реберной дуги.",
    "Язык влажный, чистый. Живот не вздут, симметричный, участвует в акте дыхания. При пальпации  мягкий, болезненный в правом подреберье. Симптомы раздражения брюшины отрицательные. Дополнительные образования в брюшной полости не пальпируются. Печень не увеличена, по краю реберной дуги. ",
    "Язык влажный, чистый. Живот не вздут, симметричный, участвует в акте дыхания. При пальпации  мягкий, болезненный в правых отделах. Симптомы раздражения брюшины отрицательные. Дополнительные образования в брюшной полости не пальпируются. Печень не увеличена, по краю реберной дуги. "
]

posConv={'ADJF':'_ADJ','NOUN':'_NOUN','VERB':'_VERB'}
def getArticleDictionary(text, needPos=None):
    morph = pymorphy2.MorphAnalyzer()
    words=[a[0] for a in re.findall("([А-ЯЁа-яё]+(-[А-ЯЁа-яё]+)*)", text)]
    reswords=[]

    for w in words:
        wordform = morph.parse(w)[0]
        try:
            if wordform.tag.POS in ['ADJF', 'NOUN', 'VERB']:
                if needPos!=None:
                    reswords.append(wordform.normal_form+posConv[wordform.tag.POS])
                else:
                    reswords.append(wordform.normal_form)
        except:
            pass

    stat=Counter(reswords)
    #stat={a: stat[a] for a in stat.keys() if stat[a]>1}
    stat={a: stat[a] for a in stat.keys()}
    return stat

def cosineSimilarity(a, b):
    if len(a.keys())==0 or len(b.keys())==0:
        return 0
    sumab=sum([a[na]*b[na] for na in a.keys() if na in b.keys()])
    suma2=sum([a[na]*a[na] for na in a.keys()])
    sumb2=sum([b[nb]*b[nb] for nb in b.keys()])
    return sumab/math.sqrt(suma2*sumb2)

def compare_texts(texts):
    quoteDictionaries = []
    for i in range(0, len(texts)):
        print("Создание частотного словаря: " + str(i) + "/" + str(len(texts)), end='\r')
        newDict = getArticleDictionary(texts[i])
        quoteDictionaries.append(newDict)
    print()

    similarities = []
    for i in range(0, len(texts)):
        print("Нахождение расстояния: " + str(i) + "/" + str(len(texts)), end='\r')
        similarities.append(cosineSimilarity(quoteDictionaries[0], quoteDictionaries[i]))
    print()

    print("Создание списка...")
    print()
    simList = list(zip(similarities, texts))
    simList.sort(key=lambda x: x[0], reverse=True)

    for i in range(len(simList)):
        print(str(simList[i][0]))
        print("==========")
        print(simList[i][1])
        print("==========")
        print()

class MyWin(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        QtWidgets.QWidget.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # Здесь прописываем событие нажатия на кнопку
        self.ui.pushButton.clicked.connect(self.MyFunction)

    # Пока пустая функция которая выполняется
    # при нажатии на кнопку
    def MyFunction(self):
        self.ui.textEdit_2.setText("")
        strings = self.ui.textEdit.toPlainText()
        # arr = strings.split('\n')
        result = ''
        quotes[0] = strings
        result = compare_texts(quotes)
        self.ui.textEdit_2.setText(result)

if __name__=="__main__":
    app = QtWidgets.QApplication(sys.argv)
    myapp = MyWin()
    myapp.show()
    sys.exit(app.exec_())
